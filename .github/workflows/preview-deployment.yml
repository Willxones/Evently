name: Preview Deployment

on:
  pull_request:
    types: [closed]
    branches:
      - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check if PR was merged
        id: check_merge
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            core.setOutput('merged', pullRequest.merged);

      - name: Install Vercel CLI
        if: steps.check_merge.outputs.merged == 'true' # Condition moved here
        run: npm install -g vercel

      - name: Deploy to Vercel (Preview)
        if: steps.check_merge.outputs.merged == 'true' # Condition moved here
        run: vercel --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Get Preview URL
        id: preview_url
        if: steps.check_merge.outputs.merged == 'true' # Condition moved here
        run: |
          echo "::set-output name=url::$(vercel url)"

      - name: Add Preview URL to Pull Request
        if: steps.check_merge.outputs.merged == 'true' # Condition moved here
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = '${{ secrets.VERCEL_PROJECT_ID }}';
            const token = '${{ secrets.VERCEL_TOKEN }}';
            const orgId = '${{ secrets.VERCEL_ORG_ID }}';

            const getDeploymentURL = async () => {
              const res = await fetch(`https://api.vercel.com/v9/projects/${projectId}/deployments`, {
                headers: {
                  Authorization: `Bearer ${token}`,
                },
              });

              const deployments = await res.json();

              if (!deployments || deployments.length === 0) {
                return null; // No deployments found
              }

              const latestDeployment = deployments[0]; // Get the latest deployment
              if (latestDeployment.url) {
                return latestDeployment.url;
              } else {
                return null; // URL not yet available
              }
            };

            let url = null;
            const maxAttempts = 10; // Adjust as needed
            let attempts = 0;

            while (!url && attempts < maxAttempts) {
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 5 seconds
              url = await getDeploymentURL();
              attempts++;
            }

            if (url) {
              core.setOutput('url', url);
            } else {
              core.setFailed('Failed to get preview URL after multiple attempts.');
            }
